package sacovec.olga;

public class Task {


    void task1() {
       /*
        Вам надо разработать 1 feature file под сценарий, который я описал ниже.
        Шаги:
         - Развернуть окно браузера на весь экран
         - Перейдите на сайт https://junit.org/junit5/
         - Проверить, что текст 'User Guide' кнопки из шага выше виден (На скрине img_1 вы найдёте под пунктом 1 элемент из этого шага).

         После разработки feature file вам надо реализовать все шаги с логикой к этому feature file.
         Не забудьте запустить свой тест, что бы проверить его. Запуск должен быть через отдельный класс раннер, RunnerTaskVariant2.
         Класс RunnerTaskVariant2 с всеми настройками вы должны создать самостоятельно.
         */
    }

    void task2() {
        /*
        Вам надо разработать 1 feature file под сценарий, который я описал ниже.
        Шаги:
         - Перейдите на сайт https://testng.org/
         - Развернуть окно браузера на весь экран
         - Перейти по ссылке '3. TestNG Documentation' в левом навигационном меню (На скрине img_2 вы найдёте под пунктом 1 элемент из этого шага).
         - Перейти в под меню '3.2. Annotations' в левом навигационном меню (На скрине img_2 вы найдёте под пунктом 2 элемент из этого шага).
         - Проверить, что таблица аннотаций содержит 3 колонки (На скрине img_2 вы найдёте под пунктом 3 таблицу из этого шага).

         После разработки feature file вам надо реализовать все шаги с логикой к этому feature file.
         Не забудьте запустить свой тест, что бы проверить его. Запуск должен быть через отдельный класс раннер, RunnerTaskVariant2.
         Класс RunnerTaskVariant2 с всеми настройками вы должны создать самостоятельно.
         */
    }

    void task3() {
       /*
        Вам надо разработать 1 feature file под сценарий, который я описал ниже.
        Шаги:
         - Перейдите на сайт https://testng.org/
         - Развернуть окно браузера на весь экран
         - Перейти по ссылке '13. The TestNG TextBook: Next Generation Java Testing' в левом навигационном меню (На скрине img_3 вы найдёте под пунктом 1 элемент из этого шага).
         - Проверить, что формат картинки .jpg (На скрине img_3 вы найдёте под пунктом 2 картинку из этого шага).

         После разработки feature file вам надо реализовать все шаги с логикой к этому feature file.
         Не забудьте запустить свой тест, что бы проверить его. Запуск должен быть через отдельный класс раннер, RunnerTaskVariant2.
         Класс RunnerTaskVariant2 с всеми настройками вы должны создать самостоятельно.
         */
    }

    void task4() {
        /*
        Вам дано 4 цифры 1,2,3,4.
        Задача написать тест с использованием датапровайдера JUnit5.
        Тест должен запускаться 4 раза для каждого числа и проверять, что число для которого он запускается больше 0
         */
    }

    void task5() {
        /*
        Создайте тест сценарий с использованием cucumber.
        К этому сценарию вам надо создать датапровайдер с двумя наборами данных.
        Первый набор будет иметь строки 'tested' и 'testing'.
        Второй набор будет иметь строки 'test' и 'tester'.
        Напишите, единственный шаг к этому сценарию, в котором будет проверка, что длинна строки из первой колонки, больше длинны строки из второй колонки.
        В результате у вас будет сценарий выполняться 2 раза.
        Первый раз сценарий будет проверять, что длинна строки tested больше длинны строки testing. Второй раз, что длинна test больше длины tester.
         */
    }

}
