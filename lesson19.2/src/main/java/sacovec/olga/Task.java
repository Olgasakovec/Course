package sacovec.olga;

import org.junit.jupiter.api.Test;

public class Task {
    @Test
    void task1() {
        /*
        Вам надо разработать 1 тест, сценарий для этого теста я вам уже придумал и запишу ниже.
        Шаги:
         - Развернуть окно браузера на весь экран
         - Перейдите на сайт https://www.jetbrains.com/
         - Кликнуть на выпадающий список 'Developer Tools' в навигационном меню сайта (На скрине img_1 вы найдёте под пунктом 1 элемент из этого шага).
         - Кликнуть по пункту меню 'Writerside' (На скрине img_1 вы найдёте под пунктом 2 элемент из этого шага).
         - Проверить, что текст 'SDK docs' виден (На скрине img_2 вы найдёте под пунктом 1 элемент из этого шага).
        */
    }

    @Test
    void task2() {
        /*
        Вам надо разработать 1 тест, сценарий для этого теста я вам уже придумал и запишу ниже.
        Шаги:
         - Развернуть окно браузера на весь экран
         - Перейдите на сайт https://www.jetbrains.com/
         - Кликнуть на выпадающий список 'Developer Tools' в навигационном меню сайта (На скрине img_1 вы найдёте под пунктом 1 элемент из этого шага).
         - Кликнуть по пункту меню 'Writerside' (На скрине img_1 вы найдёте под пунктом 2 элемент из этого шага).
         - Нажмите кнопку 'Play' (На скрине img_5 вы под пунктом 1 элемент из этого шага).
         - Проверить, что заголовок видео 'Getting Started With Writerside' виден (На скрине img_2 вы найдёте под пунктом 1 элемент из этого шага).
         */
    }

    @Test
    void task3() {
        /*
        Вам надо разработать 1 тест, сценарий для этого теста я вам уже придумал и запишу ниже.
        Шаги:
         - Развернуть окно браузера на весь экран
         - Перейдите на сайт https://www.jetbrains.com/
         - Кликнуть на выпадающий список 'Developer Tools' в навигационном меню сайта (На скрине img_1 вы найдёте под пунктом 1 элемент из этого шага).
         - Кликнуть по пункту меню 'PyCharm' (На скрине img_3 вы найдёте под пунктом 1 элемент из этого шага).
         - Проверить, что кнопка 'Download' не задизейблена (На скрине img_4 вы найдёте под пунктом 1 элемент из этого шага).
         */
    }

    void task4() {
        /*
        Вам дано 3 строки "testing", "test", "tested".
        Задача написать тест с использованием датапровайдера TestNg.
        Тест должен запускаться 3 раза для каждого значения и проверять, что строка для которой он запускается не пустая.
         */
    }

    void task5() {
        /*
        Создайте тест с использованием TestNg.
        К этому тесту вам надо создать датапровайдер с двумя наборами данных.
        Первый набор будет иметь числа 10 и 20
        Второй набор будет иметь числа 20 и 10
        В тесте будет проверка, что первое число из набора, не равно второму числу из этого же набора.
        В результате у вас будет тест выполняться 2 раза.
        Первый раз тест будет проверять, что 10 не равно 5. Второй раз, что 20 не равно 16.
         */
    }

    void task6() {
        /*
        Подключите Allure отчёт к вашим тестам или используйте отчёт из TestNG.
        Запустите ваши тесты.
        Сгенерируйте Allure или TestNG отчёт на основе результатов ваших тестов.
        Если отчёт успешно сгенерирован, то у вас будет открыт дашборд Allure или TestNG, где будут показаны ваши тесты.
        Сделайте скрин этого дашборда и добавьте его в ваш проект, по этому скрину будет понятно, что у вас всё получилось.
        Пример скрина можно найти в пакете вашего варианта под название allure.png
         */
    }
}

